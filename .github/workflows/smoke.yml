---
name: Mac and Windows Smoke

run-name: ${{ github.actor }} is running smoke tests
on:
  pull_request:
  push:

jobs:
  Smoke-Windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          mkdir -p artifacts;
          pip3 install 'pipenv==2023.11.15';
          pip3 install 'ruff>=0.4.8,<0.5';
          bash collect_executables.sh;
          ls .;
          rm ./pyproject.toml;
          mv ./ci_pyproject.toml ./pyproject.toml;
          pipenv install;
      - name: Run Setup.exe
        id: setup
        run: |
          .\setup.exe /silent;
          Start-Sleep -Seconds 10;
      - name: Run Smoke Tests in Win
        if: steps.setup.conclusion == 'success'
        run: |
          pipenv run pytest tests/form_autofill/test_address_autofill_attribute.py
          $env:TEST_EXIT_CODE = $LASTEXITCODE
          mv artifacts artifacts-win || true
          exit $env:TEST_EXIT_CODE
      - name: Run Smoke Tests in Win (Headed)
        if: steps.setup.conclusion == 'success'
        run: |
          rm ./pyproject.toml;
          mv ./ci_pyproject_headed.toml ./pyproject.toml;
          pipenv run pytest tests/menus/test_frequently_used_context_menu.py::test_save_page_as
          $env:TEST_EXIT_CODE = $LASTEXITCODE
          rm artifacts/assets -r -Force
          mv artifacts/* artifacts-win || true
          exit $env:TEST_EXIT_CODE
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-win
          path: artifacts-win
  Smoke-MacOS:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          mkdir -p artifacts;
          pip3 install 'pipenv==2023.11.15';
          pip3 install 'ruff>=0.4.8,<0.5';
          bash collect_executables.sh;
          sleep 3;
          rm ./pyproject.toml;
          mv ./ci_pyproject.toml ./pyproject.toml;
          pipenv install;
      - name: Run Smoke Tests in MacOS
        run: |
          pipenv run pytest --fx-executable $(cat ./fx_location) tests/form_autofill/test_address_autofill_attribute.py || TEST_EXIT_CODE=$?
          mv artifacts artifacts-mac || true
          exit $TEST_EXIT_CODE
      - name: Run Smoke Tests in MacOS (Headed)
        run: |
          mv ./ci_pyproject_headed.toml ./pyproject.toml;
          pipenv run pytest --fx-executable $(cat ./fx_location) tests/menus/test_frequently_used_context_menu.py::test_save_page_as || TEST_EXIT_CODE=$?
          mv -r artifacts/* artifacts-mac/ || true
          exit $TEST_EXIT_CODE
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-mac
          path: artifacts-mac

  Use-Artifacts:
    runs-on: ubuntu-latest
    needs:
      - Smoke-Windows
      - Smoke-MacOS
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          pip3 install 'pipenv==2023.11.15'
          pipenv install
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: artifacts-win
          path: artifacts-win
      - name: Download MacOS artifact
        uses: actions/download-artifact@v4
        with:
          name: artifacts-mac
          path: artifacts-mac
      - name: List downloaded files
        run: ls artifacts-win/
      - name: List downloaded MacOS files
        run: ls artifacts-mac/
      - name: Run script with secret
        env:
          SLACK_KEY: ${{ secrets.SLACK_KEY }}
          GCP_CREDENTIAL: ${{ secrets.GCP_CREDENTIAL }}
        run: |
          pipenv run python notifier.py

      # - name: Use artifact
      #   run: |
      #     # Add your commands here to use the downloaded artifacts
      #     cat downloaded-artifacts/artifacts-win/some-file.txt